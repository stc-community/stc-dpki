// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package internal

import (
	"context"
	"github.com/stc-community/stc-dpki/internal/api"
	"github.com/stc-community/stc-dpki/internal/dao/certificate"
	"github.com/stc-community/stc-dpki/internal/initx"
	"github.com/stc-community/stc-dpki/internal/router"
	"github.com/stc-community/stc-dpki/internal/service"
)

// Injectors from wire.go:

func BuildInjector(ctx context.Context) (*Injector, func(), error) {
	execCloser, cleanup, err := initx.InitStorage()
	if err != nil {
		return nil, nil, err
	}
	ethClient, cleanup2, err := initx.InitEthClient(ctx)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	certificateRepo := &certificate.CertificateRepo{
		DB:  execCloser,
		Eth: ethClient,
	}
	cfsslHandler, err := initx.InitCfssl()
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	tlsSrv := &service.TlsSrv{
		CertificateRepo: certificateRepo,
		CfsslHandler:    cfsslHandler,
	}
	tlsAPI := &api.TlsAPI{
		TlsSrv: tlsSrv,
	}
	cache := initx.InitOcspCache()
	ocspSrv := &service.OcspSrv{
		CertificateRepo: certificateRepo,
		CfsslHandler:    cfsslHandler,
		Cache:           cache,
		Ctx:             ctx,
	}
	ocspAPI := &api.OcspAPI{
		OcspSrv: ocspSrv,
	}
	certificateSrv := &service.CertificateSrv{
		CertificateRepo: certificateRepo,
	}
	certificateAPI := &api.CertificateAPI{
		CertificateSrv: certificateSrv,
	}
	routerRouter := &router.Router{
		TlsAPI:         tlsAPI,
		OcspAPI:        ocspAPI,
		CertificateAPI: certificateAPI,
	}
	engine := InitGinEngine(routerRouter)
	serveMux := InitOcspEngine(ocspAPI)
	injector := &Injector{
		Engine:     engine,
		OcspEngine: serveMux,
		Router:     routerRouter,
	}
	return injector, func() {
		cleanup2()
		cleanup()
	}, nil
}
